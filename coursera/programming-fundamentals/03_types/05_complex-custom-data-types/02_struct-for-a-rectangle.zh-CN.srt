1
00:00:03,488 --> 00:00:08,247
在这个例子中，我们将看到一小段代码的语义，它适用于这个

2
00:00:08,247 --> 00:00:09,970
struct rect_t。

3
00:00:09,970 --> 00:00:16,510
这个结构表示一个包含四个整数的矩形，分别是左、下、右和上。

4
00:00:16,510 --> 00:00:20,750
这里有一些声明和使用结构 rect_t 的代码。与

5
00:00:20,750 --> 00:00:23,860
往常一样，我们从 main 的开头开始执行。

6
00:00:23,860 --> 00:00:29,810
第一条语句声明了一个名为 myRect 的 rect_t 类型的变量。

7
00:00:29,810 --> 00:00:33,550
我们将在主框架内为这个变量画一个方框

8
00:00:33,550 --> 00:00:35,550
并将其标记为 myRect。

9
00:00:35,550 --> 00:00:40,880
但是，与我们绘制的其他方框不同，这个方框里面还有另外四个方框

10
00:00:40,880 --> 00:00:46,840
，一个用于结构的每个字段，分别是左、下、右和上。

11
00:00:46,840 --> 00:00:49,833
由于我们没有为这些字段分配任何值，因此

12
00:00:49,833 --> 00:00:54,092
这些框未初始化，因此我们在其中放置了问号。

13
00:00:54,092 --> 00:00:59,128
下一行说 myrect.left = -4。

14
00:00:59,128 --> 00:01:01,614
这是一个赋值语句，所以

15
00:01:01,614 --> 00:01:05,500
我们必须找到左边命名的方框。

16
00:01:05,500 --> 00:01:11,180
这行的第一部分命名为 myRect，这是整个大方框。

17
00:01:11,180 --> 00:01:17,760
但是，它显示的是.left，它命名了 myRect 框内标有左边的方框。

18
00:01:18,770 --> 00:01:21,840
请记住，圆点的意思是里面。

19
00:01:21,840 --> 00:01:25,060
因此，现在我们将在此框中输入 -4。

20
00:01:25,060 --> 00:01:29,676
下一行的行为类似，唯一的不同是我们在

21
00:01:29,676 --> 00:01:34,204
myRect 框的底部方框中输入 1，同样用于

22
00:01:34,204 --> 00:01:39,454
将 8 分配给 myrect.right，将 6 分配给 myrect.top。

23
00:01:39,454 --> 00:01:43,720
现在我们要打印一些关于这个矩形的信息。

24
00:01:43,720 --> 00:01:49,830
再说一遍，myrect.left 命名了 myrect.box 内的左边方框。

25
00:01:49,830 --> 00:01:53,415
因此，我们将第一个 %d 传递给 printf。对于

26
00:01:53,415 --> 00:01:58,440
第二个 %d，我们将将 1 传递给 printf。

27
00:01:58,440 --> 00:02:03,083
所以我们将打印左下角的 = (-4, 1)。

28
00:02:03,083 --> 00:02:06,180
然后我们将对右上角做类似的事情。

29
00:02:07,230 --> 00:02:10,317
现在你已经看到了声明和使用结构体的语义