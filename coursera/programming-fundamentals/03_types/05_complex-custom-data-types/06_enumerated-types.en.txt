Now we're going to show you how to define and use your own enumerated type. At the top of the screen, we take a color coded threat level of a standard security system, and encoded into an enumerated type. There are five possible levels. Low, guarded, elevated, high, and severe. We can refer to these levels using exactly these words throughout our code. Next, there are two helper functions whose definitions we will show you later. The first function is printThreat, which prints the string associated with the particular enumerated type. The second function is printShoes, which prints whether a person is required to take off their shoes given the current threat level. Our main, initializes a threat level, prints it out and then calls these two helper functions. Let's take a closer look at our enumerated type. C creates a correspondence between each of these words and an integer value. So low has the value 0, and severe has the value 4. Notice how the function printThreat can refer to these levels using exactly these words throughout its definition, making the code much easier to read, printShoes does this as well. Inside the main, we declare a new variable of type threat level T called, myThreat. We initialize this variable to the enum, HIGH, which has the integer value 3. In order to print out the current threat level, we call the function, printThreat. We create a stack frame for printThreat in which the argument, myThreat, will be referred to as threat. We mark the call site location and step into print threat. Inside print threat, there is a switch statement which checks the value of the threat and jumps to the corresponding case. Here, we're jumping to case HIGH. Inside of this case, we print Orange/High, and the break exits us from the switch statement. Now we return to the function that called printThreat, which is our main. Upon returning, the stack frame for printThreat is destroyed. Next, we execute the call to printShoes, creating a stack frame for print shoes, in which the argument, myThreat, is referred to as currThreat. We mark the call site location, and step into print shoes. Inside printShoes, there is an if/else statement. The if clause tests whether the current threat is greater than or equal to elevated. In this case, we're testing whether 3 is greater than or equal to 2. Since it is, we step into the then clause, print out the message, Please take off your shoes, and exit the clause. Now we return to the function that called print shoes, which is our main. Upon returning, the stack frame for print shoes is destroyed. Finally, the program exits the main, and its stack frame is destroyed. Notice how much easier the code is to read because we've used an enumerated type. If instead, we had an int called, threat_level, with values 0 through 4. The code would be littered with a lot of numbers whose meaning might be unclear to the reader. Enumerated types make it easier to read, write, and modify code.