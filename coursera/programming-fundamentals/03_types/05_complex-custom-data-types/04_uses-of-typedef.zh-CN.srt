1
00:00:02,762 --> 00:00:06,410
这里我们有一个矩形的结构声明。

2
00:00:06,410 --> 00:00:10,900
当你声明一个结构时，结构标签（在本例中为 rect_tag）会

3
00:00:10,900 --> 00:00:12,520
标识该结构的类型。

4
00:00:12,520 --> 00:00:14,670
但其本身并不是一个类型名称。

5
00:00:14,670 --> 00:00:18,430
当你想命名结构类型时，你必须包含 struct 关键字，

6
00:00:18,430 --> 00:00:19,860
就像你在这里看到的那样。

7
00:00:19,860 --> 00:00:23,760
许多程序员发现，在需要使用固定结构

8
00:00:23,760 --> 00:00:29,140
类型的任何地方修改 struct 都很乏味，因此他们使用 typedef 为结构类型定义新的类型名称。

9
00:00:29,140 --> 00:00:32,605
这里显示了在我们的矩形结构中使用 typedef 的一种方法。

10
00:00:32,605 --> 00:00:35,490
typedef 关键字表示我们将为

11
00:00:35,490 --> 00:00:36,368
现有类型创建一个新名称。

12
00:00:36,368 --> 00:00:41,216
在本例中，rect_t 的新名称在声明中排在最后

13
00:00:41,216 --> 00:00:45,500
，现有类型的名称介于它们之间。

14
00:00:45,500 --> 00:00:49,780
请注意，这里的现有类型是 struct rect_tag。

15
00:00:49,780 --> 00:00:51,706
现在我们可以使用 rect_t 作为类型名称了。

16
00:00:51,706 --> 00:00:55,539
它是 struct rect_tag 的别名或其他名称。

17
00:00:55,539 --> 00:00:59,910
我们还有其他几种方法可以用 typedef 做同样的事情。

18
00:00:59,910 --> 00:01:02,150
我们都提到了它们，这样如果你

19
00:01:02,150 --> 00:01:06,420
在别人的代码中看到一种或另一种方式，你就不会感到困惑。

20
00:01:06,420 --> 00:01:10,760
我们可以将 struct 声明和 typedef 合并为一个语句。

21
00:01:10,760 --> 00:01:13,700
这遵循的规则与我们刚才讨论的规则相同。

22
00:01:13,700 --> 00:01:17,370
新名称 rect_t 出现在 typedef 语句的末尾。

23
00:01:17,370 --> 00:01:21,980
而现有类型介于新名称和 typedef 关键字之间。

24
00:01:21,980 --> 00:01:25,090
碰巧这里的现有类型是在

25
00:01:25,090 --> 00:01:26,070
typedef 语句中声明的。

26
00:01:27,460 --> 00:01:30,740
第三个选项与前一个选项相同

27
00:01:30,740 --> 00:01:33,040
，只是省略了 struct 标签。

28
00:01:33,040 --> 00:01:38,580
这将生成一个没有标签的结构，并立即将该结构别名为 rect_t。T

29
00:01:38,580 --> 00:01:41,080
ypedef 的用途不仅仅是结构。

30
00:01:41,080 --> 00:01:45,200
有时，我们正在编写一些处理像素的 RGB 值的代码。

31
00:01:45,200 --> 00:01:49,920
在这个假设的示例中，我们最初使用无符号整数来表示每个像素的红

32
00:01:49,920 --> 00:01:52,660
色、绿色或蓝色分量。

33
00:01:52,660 --> 00:01:57,280
但是，如果稍后我们意识到最好使用无符号字符，

34
00:01:57,280 --> 00:02:03,520
因为RGB值只能在0到255之间，而且我们不想浪费内存，会发生什么。

35
00:02:03,520 --> 00:02:06,810
按照我们编写代码的方式，我们必须找到

36
00:02:06,810 --> 00:02:11,870
我们使用无符号整数来表示 RGB 值的每个位置并对其进行更改。

37
00:02:11,870 --> 00:02:15,730
我们甚至无法使用编辑器的搜索和替换功能，

38
00:02:15,730 --> 00:02:20,410
因为可能还有其他用法 unsigned int 不代表 RGB 值。

39
00:02:20,410 --> 00:02:22,520
因此，我们不想更改它们。

40
00:02:22,520 --> 00:02:25,220
这样的更改既乏味又容易出错。

41
00:02:25,220 --> 00:02:28,620
实际上，编程的一个重要规则是编写代码

42
00:02:28,620 --> 00:02:32,170
，这样，如果您必须更改某些内容，则只需在一个地方进行更改即可。

43
00:02:33,190 --> 00:02:35,810
现在假设我们最初是用这种方式编写代码的。

44
00:02:36,920 --> 00:02:41,240
在这里，我们使用 typedef 将 rgb_t 设为无符号整数的别名。

45
00:02:45,640 --> 00:02:47,130
然后在我们需要谈论 RGB 点值的所有地方都使用 rgb_t 作为类型名称。

46
00:02:47,130 --> 00:02:51,410
有了这段代码，如果我们想更改我们用于 RGB 值的类型，

47
00:02:51,410 --> 00:02:56,290
我们只需更改 typedef 语句，其他所有内容都会正确更改。

48
00:02:56,290 --> 00:02:59,880
附带的好处是，这有助于提高我们代码的可读性。

49
00:02:59,880 --> 00:03:03,010
任何阅读代码的人都可以分辨出变量、参数或

50
00:03:03,010 --> 00:03:07,820
返回值何时是 RGB 值，因为它的类型是 rgb_t。T

51
00:03:07,820 --> 00:03:11,800
ypedef 非常适合让你的代码更易于修改和阅读。