在这个例子中，我们将看到一小段代码的语义，它适用于这个 struct rect_t。 这个结构表示一个包含四个整数的矩形，分别是左、下、右和上。 这里有一些声明和使用结构 rect_t 的代码。与 往常一样，我们从 main 的开头开始执行。 第一条语句声明了一个名为 myRect 的 rect_t 类型的变量。 我们将在主框架内为这个变量画一个方框 并将其标记为 myRect。 但是，与我们绘制的其他方框不同，这个方框里面还有另外四个方框 ，一个用于结构的每个字段，分别是左、下、右和上。 由于我们没有为这些字段分配任何值，因此 这些框未初始化，因此我们在其中放置了问号。 下一行说 myrect.left = -4。 这是一个赋值语句，所以 我们必须找到左边命名的方框。 这行的第一部分命名为 myRect，这是整个大方框。 但是，它显示的是.left，它命名了 myRect 框内标有左边的方框。 请记住，圆点的意思是里面。 因此，现在我们将在此框中输入 -4。 下一行的行为类似，唯一的不同是我们在 myRect 框的底部方框中输入 1，同样用于 将 8 分配给 myrect.right，将 6 分配给 myrect.top。 现在我们要打印一些关于这个矩形的信息。 再说一遍，myrect.left 命名了 myrect.box 内的左边方框。 因此，我们将第一个 %d 传递给 printf。对于 第二个 %d，我们将将 1 传递给 printf。 所以我们将打印左下角的 = (-4, 1)。 然后我们将对右上角做类似的事情。 现在你已经看到了声明和使用结构体的语义