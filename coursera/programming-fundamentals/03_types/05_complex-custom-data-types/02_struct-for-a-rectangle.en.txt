In this example, we will see the semantics
of a small piece of code which works with this struct rect_t. This struct represents a rectangle with
four ints, left, bottom, right, and top. And here are some code which declares and
uses the struct rect_t. As always, we start execution
at the beginning of main. The first statement declares a variable
of type rect_t called myRect. We will draw a box for
this variable inside of main's frame and label it myRect. However, unlike other boxes we have drawn,
this box has four other boxes inside of it, one for each field of the struct,
left, bottom, right, and top. As we have not assigned any
values to these fields, these boxes are uninitialized so
we have placed question marks in them. The next line says myRect.left = -4. This is an assignment statement, so we must find the box named
by the left hand side. The first part of this line names myRect,
which is the entire large box. However, it says .left, which names the
box labelled left inside of myRect box. Remember that dot means inside of. So now we will put -4 into this box. The next line behaves similarly,
except that we are putting 1 into the bottom box inside of
the myRect box, and likewise for assigning 8 to the myRect.right,
and assigning 6 to myRect.top. Now we are going to print some
information about this rectangle. Again, myRect.left names the left
box inside of the myRect.box. So we will pass -4 to printf for
the first %d. And we will pass 1 to printf for
the second %d. So we will print that bottom left = (-4,
1). We will then do a similar thing for
the top right. Now you have seen the semantics
of declaring and using structs