这里我们有一个矩形的结构声明。 当你声明一个结构时，结构标签（在本例中为 rect_tag）会 标识该结构的类型。 但其本身并不是一个类型名称。 当你想命名结构类型时，你必须包含 struct 关键字， 就像你在这里看到的那样。 许多程序员发现，在需要使用固定结构 类型的任何地方修改 struct 都很乏味，因此他们使用 typedef 为结构类型定义新的类型名称。 这里显示了在我们的矩形结构中使用 typedef 的一种方法。 typedef 关键字表示我们将为 现有类型创建一个新名称。 在本例中，rect_t 的新名称在声明中排在最后 ，现有类型的名称介于它们之间。 请注意，这里的现有类型是 struct rect_tag。 现在我们可以使用 rect_t 作为类型名称了。 它是 struct rect_tag 的别名或其他名称。 我们还有其他几种方法可以用 typedef 做同样的事情。 我们都提到了它们，这样如果你 在别人的代码中看到一种或另一种方式，你就不会感到困惑。 我们可以将 struct 声明和 typedef 合并为一个语句。 这遵循的规则与我们刚才讨论的规则相同。 新名称 rect_t 出现在 typedef 语句的末尾。 而现有类型介于新名称和 typedef 关键字之间。 碰巧这里的现有类型是在 typedef 语句中声明的。 第三个选项与前一个选项相同 ，只是省略了 struct 标签。 这将生成一个没有标签的结构，并立即将该结构别名为 rect_t。T ypedef 的用途不仅仅是结构。 有时，我们正在编写一些处理像素的 RGB 值的代码。 在这个假设的示例中，我们最初使用无符号整数来表示每个像素的红 色、绿色或蓝色分量。 但是，如果稍后我们意识到最好使用无符号字符， 因为RGB值只能在0到255之间，而且我们不想浪费内存，会发生什么。 按照我们编写代码的方式，我们必须找到 我们使用无符号整数来表示 RGB 值的每个位置并对其进行更改。 我们甚至无法使用编辑器的搜索和替换功能， 因为可能还有其他用法 unsigned int 不代表 RGB 值。 因此，我们不想更改它们。 这样的更改既乏味又容易出错。 实际上，编程的一个重要规则是编写代码 ，这样，如果您必须更改某些内容，则只需在一个地方进行更改即可。 现在假设我们最初是用这种方式编写代码的。 在这里，我们使用 typedef 将 rgb_t 设为无符号整数的别名。 然后在我们需要谈论 RGB 点值的所有地方都使用 rgb_t 作为类型名称。 有了这段代码，如果我们想更改我们用于 RGB 值的类型， 我们只需更改 typedef 语句，其他所有内容都会正确更改。 附带的好处是，这有助于提高我们代码的可读性。 任何阅读代码的人都可以分辨出变量、参数或 返回值何时是 RGB 值，因为它的类型是 rgb_t。T ypedef 非常适合让你的代码更易于修改和阅读。