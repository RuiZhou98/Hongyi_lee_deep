1
00:00:03,488 --> 00:00:08,247
In this example, we will see the semantics
of a small piece of code which works

2
00:00:08,247 --> 00:00:09,970
with this struct rect_t.

3
00:00:09,970 --> 00:00:16,510
This struct represents a rectangle with
four ints, left, bottom, right, and top.

4
00:00:16,510 --> 00:00:20,750
And here are some code which declares and
uses the struct rect_t.

5
00:00:20,750 --> 00:00:23,860
As always, we start execution
at the beginning of main.

6
00:00:23,860 --> 00:00:29,810
The first statement declares a variable
of type rect_t called myRect.

7
00:00:29,810 --> 00:00:33,550
We will draw a box for
this variable inside of main's frame and

8
00:00:33,550 --> 00:00:35,550
label it myRect.

9
00:00:35,550 --> 00:00:40,880
However, unlike other boxes we have drawn,
this box has four other boxes inside

10
00:00:40,880 --> 00:00:46,840
of it, one for each field of the struct,
left, bottom, right, and top.

11
00:00:46,840 --> 00:00:49,833
As we have not assigned any
values to these fields,

12
00:00:49,833 --> 00:00:54,092
these boxes are uninitialized so
we have placed question marks in them.

13
00:00:54,092 --> 00:00:59,128
The next line says myRect.left = -4.

14
00:00:59,128 --> 00:01:01,614
This is an assignment statement, so

15
00:01:01,614 --> 00:01:05,500
we must find the box named
by the left hand side.

16
00:01:05,500 --> 00:01:11,180
The first part of this line names myRect,
which is the entire large box.

17
00:01:11,180 --> 00:01:17,760
However, it says .left, which names the
box labelled left inside of myRect box.

18
00:01:18,770 --> 00:01:21,840
Remember that dot means inside of.

19
00:01:21,840 --> 00:01:25,060
So now we will put -4 into this box.

20
00:01:25,060 --> 00:01:29,676
The next line behaves similarly,
except that we are putting 1

21
00:01:29,676 --> 00:01:34,204
into the bottom box inside of
the myRect box, and likewise for

22
00:01:34,204 --> 00:01:39,454
assigning 8 to the myRect.right,
and assigning 6 to myRect.top.

23
00:01:39,454 --> 00:01:43,720
Now we are going to print some
information about this rectangle.

24
00:01:43,720 --> 00:01:49,830
Again, myRect.left names the left
box inside of the myRect.box.

25
00:01:49,830 --> 00:01:53,415
So we will pass -4 to printf for
the first %d.

26
00:01:53,415 --> 00:01:58,440
And we will pass 1 to printf for
the second %d.

27
00:01:58,440 --> 00:02:03,083
So we will print that bottom left = (-4,
1).

28
00:02:03,083 --> 00:02:06,180
We will then do a similar thing for
the top right.

29
00:02:07,230 --> 00:02:10,317
Now you have seen the semantics
of declaring and using structs