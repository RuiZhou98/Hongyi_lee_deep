1
00:00:03,020 --> 00:00:08,715
让我们来看一些示例代码，这些代码显示了隐式转换何时发生，

2
00:00:08,715 --> 00:00:11,190
以及如何谨慎对待类型。

3
00:00:11,190 --> 00:00:15,930
首先，我们创建一个名为 NHR 的整数并将其初始化为 40。

4
00:00:15,930 --> 00:00:19,770
接下来，我们创作 nDays 并将其初始化为 7。

5
00:00:19,770 --> 00:00:21,750
接下来，我们有一个名为平均值的浮点数，

6
00:00:21,750 --> 00:00:25,485
它被初始化为 nHours 除以 nDays。

7
00:00:25,485 --> 00:00:30,480
nHours 和 nDays 都是整数，所以这是整数除法。

8
00:00:30,480 --> 00:00:32,280
我们有 40 除以七

9
00:00:32,280 --> 00:00:35,520
，对于整数除法，则得出五。

10
00:00:35,520 --> 00:00:38,505
现在，由于我们要为浮点数赋值 int，

11
00:00:38,505 --> 00:00:43,509
编译器会将该整数结果隐式转换为浮点数。

12
00:00:43,509 --> 00:00:45,895
但是它是在除法之后这样做的，

13
00:00:45,895 --> 00:00:50,300
所以我们最终将平均值初始化为5.0。

14
00:00:50,300 --> 00:00:56,775
然后我们打印出 7 天内 40 小时等于每天 5.0 小时。

15
00:00:56,775 --> 00:00:58,923
这不是正确的答案，

16
00:00:58,923 --> 00:01:01,140
所以让我们修复这段代码。

17
00:01:01,140 --> 00:01:04,565
在这里，我们对代码做了一个小改动。在@@

18
00:01:04,565 --> 00:01:09,645
进行除法之前，我们已经明确将 nDay

19
00:01:09,645 --> 00:01:12,110
s 转换为浮点数，此处用红色下划线标出。

20
00:01:12,110 --> 00:01:13,980
我们以同样的方式开始，

21
00:01:13,980 --> 00:01:16,725
nHours 被创建并初始化为 40，

22
00:01:16,725 --> 00:01:20,320
nDays 被创建并初始化为 7。

23
00:01:20,320 --> 00:01:22,700
但是，现在情况有所不同。

24
00:01:22,700 --> 00:01:26,810
这个表达式的除数现在是七转换为浮点数，

25
00:01:26,810 --> 00:01:32,880
所以我们需要计算整数 40 除以浮点数 7.0。

26
00:01:32,880 --> 00:01:35,435
计算机将整数除以整数

27
00:01:35,435 --> 00:01:38,245
或将浮点数除以浮点数，

28
00:01:38,245 --> 00:01:40,670
因此编译器在进行除法

29
00:01:40,670 --> 00:01:44,900
之前必须将 40 隐式转换为浮点数。

30
00:01:44,900 --> 00:01:46,970
现在我们正在进行浮点除法，

31
00:01:46,970 --> 00:01:52,630
14.0 除以 7.0 等于 5.71。

32
00:01:52,630 --> 00:01:57,360
现在，我们用这个值初始化平均值，这意味着当我们打印出结果时，

33
00:01:57,360 --> 00:01:59,570
我们会得到正确的答案。

34
00:01:59,570 --> 00:02:04,495
现在你已经看到了隐式转换和显式转换。

35
00:02:04,495 --> 00:02:06,870
当你需要时，你可以使用铸造。

36
00:02:06,870 --> 00:02:08,930
但是，

37
00:02:08,930 --> 00:02:13,790
只有当你仔细考虑要在什么之间进行转换以及为什么要转换时，才应该谨慎使用它。