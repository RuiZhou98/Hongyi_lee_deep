1
00:00:03,363 --> 00:00:07,575
In this module, you will learn to
read code and execute it by hand.

2
00:00:07,575 --> 00:00:11,304
Why would you want to do this when you
could take a quick syntax lesson and

3
00:00:11,304 --> 00:00:12,920
start typing?

4
00:00:12,920 --> 00:00:16,720
Think for a moment about when you were
first learning about written language.

5
00:00:16,720 --> 00:00:19,100
Did you learn to write
before you could read?

6
00:00:19,100 --> 00:00:22,220
Probably not,
recognizing a word or sentence and

7
00:00:22,220 --> 00:00:25,770
attaching meaning is easier
than formulating your own.

8
00:00:25,770 --> 00:00:27,920
You've probably misspelled a word or

9
00:00:27,920 --> 00:00:32,540
made a grammatical error expressing
an idea that you could read just fine.

10
00:00:32,540 --> 00:00:37,520
Programming is much like this, you need
to read for understanding and understand

11
00:00:37,520 --> 00:00:42,360
exactly how code is executed before
you can write good code of your own.

12
00:00:42,360 --> 00:00:47,500
It's also easier, reading well will help
you make fewer mistakes as you go, but

13
00:00:47,500 --> 00:00:50,800
also help you troubleshoot when your
code does something you did not expect.

14
00:00:52,050 --> 00:00:54,790
My background is in
mechanical engineering, and

15
00:00:54,790 --> 00:00:58,680
in my undergraduate program,
we used MATLAB for computational tasks.

16
00:00:58,680 --> 00:01:00,790
Despite excellent instruction and

17
00:01:00,790 --> 00:01:04,750
thoughtful exercises,
many students, myself included,

18
00:01:04,750 --> 00:01:08,810
would spend hours debugging code,
mostly by guessing and checking.

19
00:01:08,810 --> 00:01:12,340
Never once did I draw a picture of
what I thought was happening, or

20
00:01:12,340 --> 00:01:15,290
execute even a line of code by hand.

21
00:01:15,290 --> 00:01:16,800
And I probably couldn't have,

22
00:01:16,800 --> 00:01:19,980
because there were a few things
I didn't understand fully.

23
00:01:19,980 --> 00:01:23,790
While teaching,
I've seen students make similar mistakes.

24
00:01:23,790 --> 00:01:28,380
Finding the cause of an error message is
a treasure hunt, one that might take much

25
00:01:28,380 --> 00:01:31,530
longer than someone spent writing
the code in the first place.

26
00:01:33,390 --> 00:01:38,290
Often, we know what we want a section of
code to be doing, maybe even what we think

27
00:01:38,290 --> 00:01:43,080
it's doing, but unless you can be sure,
you cannot be confident in your result.

28
00:01:43,080 --> 00:01:45,810
And you'll likely spend more
time debugging than you want to.

29
00:01:47,470 --> 00:01:51,840
Here's an algorithm for a function
we'll talk about later in the course.

30
00:01:51,840 --> 00:01:54,820
You can see here that each
step of the algorithm

31
00:01:54,820 --> 00:01:57,210
changes something about
the state of the program.

32
00:01:59,710 --> 00:02:02,470
Here are the same steps
implemented in code.

33
00:02:02,470 --> 00:02:05,030
Do not worry if you do not
know how to read this yet.

34
00:02:05,030 --> 00:02:08,360
The point is that the code
needs to change the program

35
00:02:08,360 --> 00:02:11,070
in the exact same way as your algorithm.

36
00:02:11,070 --> 00:02:13,200
If the code is doing something different,

37
00:02:13,200 --> 00:02:16,170
we need to change it to
match the algorithm.

38
00:02:16,170 --> 00:02:19,350
This is why learning to read code is so
important for writing it.

39
00:02:20,390 --> 00:02:24,330
In this module, you'll learn to
understand what statements do.

40
00:02:24,330 --> 00:02:27,570
Both the syntax, or
grammar of a language, and

41
00:02:27,570 --> 00:02:30,850
the semantics, or meaning a statement has.

42
00:02:30,850 --> 00:02:35,474
You'll also learn how to keep track of
the state of a program, where you are, and

43
00:02:35,474 --> 00:02:37,857
what functions can see which variables.

44
00:02:37,857 --> 00:02:41,889
To do this, you will learn how to draw
pictures of exactly what is happening

45
00:02:41,889 --> 00:02:44,040
according to a set of rules.

46
00:02:44,040 --> 00:02:47,126
Once you can do these things,
writing code will come easier.

47
00:02:47,126 --> 00:02:51,494
And when you do have a situation when
your code does not do what you expect,

48
00:02:51,494 --> 00:02:56,283
you'll have a set of tools you can use to
investigate your program to see what it is

49
00:02:56,283 --> 00:02:56,790
doing.