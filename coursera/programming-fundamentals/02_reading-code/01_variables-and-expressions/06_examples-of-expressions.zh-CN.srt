1
00:00:03,143 --> 00:00:07,710
现在你已经对表达式有了更多的了解，让我们来看看它们的实际效果。

2
00:00:07,710 --> 00:00:11,900
此代码示例从一个名为

3
00:00:11,900 --> 00:00:15,770
x 的整数变量的声明开始，该变量的行为与您已经看到的完全相同。

4
00:00:15,770 --> 00:00:20,258
接下来我们将 x 初始化为 4 + 3 * 2。

5
00:00:20,258 --> 00:00:24,030
正如你从数学中知道的那样，时间的优先级高于正数。

6
00:00:24,030 --> 00:00:27,780
因此，此表达式的计算结果为 4 + 6，即 10。

7
00:00:27,780 --> 00:00:31,448
因此，我们在 x 的框中输入 10。

8
00:00:31,448 --> 00:00:36,668
接下来，我们声明另一个类型为 int 的变量 y，然后

9
00:00:36,668 --> 00:00:41,676
将其初始化为 x-6，即 10-6，即 4。

10
00:00:41,676 --> 00:00:45,170
因此，我们为 y 创建一个方框并在其中放入 4。

11
00:00:45,170 --> 00:00:49,010
最后一个语句说 x = x * y。

12
00:00:49,010 --> 00:00:53,160
有时候，新手程序员期望看起来像这样的语句表现得

13
00:00:53,160 --> 00:00:57,010
像代数方程，在代数方程中你可以求解 x。

14
00:00:57,010 --> 00:00:59,190
但是，事实并非如此。

15
00:00:59,190 --> 00:01:02,390
相反，你要遵守已经学过的规则。

16
00:01:02,390 --> 00:01:06,500
右边的计算结果为 10 * 4，也就是 40，

17
00:01:06,500 --> 00:01:09,460
你在 x 的方框中输入 40。

18
00:01:11,390 --> 00:01:16,010
现在让我们再看一个例子，在我们解决这个

19
00:01:16,010 --> 00:01:21,840
问题之前，花点时间看看你能否弄清楚这个代码片段末尾 x y 和 z 的值。

20
00:01:23,940 --> 00:01:29,063
好吧，让我们逐步完成它，首先我们声明并初始化 x。

21
00:01:29,063 --> 00:01:36,330
接下来我们计算 x 乘以 3，也就是 6，然后将 y 初始化为该值。

22
00:01:36,330 --> 00:01:43,230
接下来我们计算 y 除以 2，即 3，然后将 z 初始化为该值。

23
00:01:43,230 --> 00:01:47,756
最后一个语句说 x 等于 2 加 z 模组 2。

24
00:01:47,756 --> 00:01:53,281
由于 2 + z 在括号中，因此我们先计算后得到 5。

25
00:01:53,281 --> 00:01:58,164
接下来我们计算 5 mod 2，请记住你的读数 5

26
00:01:58,164 --> 00:02:02,854
mod 2 意味着我们用 5 除以 2 但取余数，

27
00:02:02,854 --> 00:02:07,391
而不是商，所以这个表达式的计算结果为 1。

28
00:02:07,391 --> 00:02:10,810
因此，我们将 x 框中的值更新为 1。

29
00:02:10,810 --> 00:02:15,526
好吧，太棒了，现在你应该能够评估涉及各种

30
00:02:15,526 --> 00:02:17,319
数学表达式的代码了。