1
00:00:03,319 --> 00:00:07,364
Okay, now that you have the basic
ideas of function call semantics,

2
00:00:07,364 --> 00:00:09,540
let us see them in action.

3
00:00:09,540 --> 00:00:11,140
We have three functions here.

4
00:00:11,140 --> 00:00:14,020
My function, f and main.

5
00:00:14,020 --> 00:00:18,360
As you have learned, we start
execution of a program inside of main.

6
00:00:18,360 --> 00:00:19,990
We've drawn a frame for main and

7
00:00:19,990 --> 00:00:24,850
are ready to begin executing its first
statement which declares the variable a.

8
00:00:24,850 --> 00:00:27,450
So we create its box inside
of the frame for main.

9
00:00:28,490 --> 00:00:32,952
Next, we're going to set a equal
to the value of the function call,

10
00:00:32,952 --> 00:00:34,527
myFunction of 3, 7.

11
00:00:34,527 --> 00:00:38,262
To evaluate this expression,
we need to create a frame for

12
00:00:38,262 --> 00:00:42,340
the function that we are calling,
in this case, myFunction.

13
00:00:42,340 --> 00:00:45,404
This will hold the parameters and
variables of myFunction.

14
00:00:46,710 --> 00:00:50,100
Next, we pass the parameters
to myFunction.

15
00:00:50,100 --> 00:00:51,250
We create a box for

16
00:00:51,250 --> 00:00:57,190
each parameter with the names coming
from the functional declaration x and y.

17
00:00:57,190 --> 00:01:02,000
We initialize these by copying
in the values of the expressions

18
00:01:02,000 --> 00:01:04,760
that were passed, here, 3 and 7.

19
00:01:04,760 --> 00:01:09,620
Next, we need to note where to return
when we finish executing myFunction.

20
00:01:09,620 --> 00:01:12,780
This location in the code
is named the call site,

21
00:01:12,780 --> 00:01:15,090
the place where the function was called.

22
00:01:15,090 --> 00:01:19,000
We'll note it with marker 1 in the code,
and

23
00:01:19,000 --> 00:01:21,190
put the same marker in
the corner of the frame.

24
00:01:22,210 --> 00:01:25,730
Finally, we move the execution
arrow into myFunction, and

25
00:01:25,730 --> 00:01:27,370
start executing code there.

26
00:01:28,450 --> 00:01:35,280
Here, we declare and initialize z,
evaluating the expression, 2 times x-y.

27
00:01:35,280 --> 00:01:40,090
The values for x and y come from
the frame for myFunction, 3 and

28
00:01:40,090 --> 00:01:44,050
7 respectively, so z will be negative 1.

29
00:01:44,050 --> 00:01:46,500
Now, we have reached a return statement.

30
00:01:46,500 --> 00:01:49,660
Return statements tell us to
leave the current function

31
00:01:49,660 --> 00:01:52,420
returning to the call
site noted in the frame.

32
00:01:52,420 --> 00:01:55,920
They also tell us the value
to return to the caller.

33
00:01:55,920 --> 00:01:59,150
The first thing we need to do is
evaluate this expression to obtain

34
00:01:59,150 --> 00:01:59,910
the return value.

35
00:02:00,930 --> 00:02:04,151
Here, the expression is z times x, so

36
00:02:04,151 --> 00:02:08,694
we evaluate negative 1 times 3 and
get negative 3.

37
00:02:08,694 --> 00:02:11,159
Next, find where we should return.

38
00:02:11,159 --> 00:02:14,170
This is the call site
we noted in the frame.

39
00:02:14,170 --> 00:02:17,810
Then we copy the return
value back to the call site.

40
00:02:17,810 --> 00:02:20,250
The function call evaluates
to this return value.

41
00:02:21,650 --> 00:02:25,730
We move the execution arrow back to
the call site, and destroy the frame for

42
00:02:25,730 --> 00:02:27,240
the function we just returned from.

43
00:02:28,330 --> 00:02:30,200
Now, we are back in main.

44
00:02:30,200 --> 00:02:33,780
The call to myFunction
evaluated to negative 3, so

45
00:02:33,780 --> 00:02:36,420
this line behaves like a gets negative 3.

46
00:02:36,420 --> 00:02:41,897
We finished that assignment
putting negative 3 in a's box.

47
00:02:41,897 --> 00:02:45,930
Our next line again has a variable
declaration and a function call.

48
00:02:45,930 --> 00:02:50,400
We make a box for b, and
go through the same process to call f.

49
00:02:50,400 --> 00:02:54,170
We make a frame for f,
and pass parameters.

50
00:02:54,170 --> 00:02:59,780
This time, there's one parameter in
whose value is a times a which is 9.

51
00:02:59,780 --> 00:03:05,610
We note where to return and
begin executing code inside of f.

52
00:03:05,610 --> 00:03:08,390
Our next statement is a return statement,
but

53
00:03:08,390 --> 00:03:10,960
the expression involves a function call.

54
00:03:10,960 --> 00:03:15,270
So we have to evaluate that
call before anything else.

55
00:03:15,270 --> 00:03:19,000
We start with a frame and past parameters.

56
00:03:19,000 --> 00:03:25,180
x gets the value of n which is 9, and
y gets the value of n + 1 which is 10.

57
00:03:25,180 --> 00:03:26,780
We note the call site.

58
00:03:26,780 --> 00:03:30,980
We use two this time since we are already
using one somewhere else, and

59
00:03:30,980 --> 00:03:34,180
move the execution arrow to
the start of myFunction, and

60
00:03:34,180 --> 00:03:35,710
start executing code there.

61
00:03:37,070 --> 00:03:40,210
We declare Z and initialize it to 8.

62
00:03:40,210 --> 00:03:43,150
Now, we are ready to
return from myFunction.

63
00:03:43,150 --> 00:03:46,867
We evaluate z times x which is 72.

64
00:03:46,867 --> 00:03:51,840
Then we find that the call site noted in
the frame and copy the return value there.

65
00:03:52,900 --> 00:03:55,640
Finally, we move the execution back

66
00:03:55,640 --> 00:03:59,600
to the call site destroying
the frame from myFunction.

67
00:03:59,600 --> 00:04:03,230
Now, we pick up were we
left off an f using 72 for

68
00:04:03,230 --> 00:04:05,338
the value of the call to myFunction.

69
00:04:05,338 --> 00:04:09,607
We evaluate 3 + 72 to get 75.

70
00:04:09,607 --> 00:04:14,515
Since we are evaluating the return
statement, this is the return value of f,

71
00:04:14,515 --> 00:04:18,970
so we find the call site and
copy the return value there.

72
00:04:18,970 --> 00:04:22,861
Then we return to that call site
destroying the frame for f.

73
00:04:22,861 --> 00:04:28,340
Now, we can finish
the initialization of b, b gets 75.

74
00:04:28,340 --> 00:04:32,360
Lastly, we reached the return
statement from main.

75
00:04:32,360 --> 00:04:35,970
When we return from main,
the program exits so we are done.