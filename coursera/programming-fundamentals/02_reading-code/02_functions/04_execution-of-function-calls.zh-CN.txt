好了，既然你已经掌握了函数调用语义的基本概念，那 就让我们来看看它们的实际应用。 我们这里有三个函数。 我的函数，f 和 main。 如你所知，我们开始在 main 中执行一个程序。 我们已经为 main 画了一个框架， 准备开始执行它的第一个声明变量 a 的语句。 所以我们在框架内为 main 创建了它的方框。 接下来，我们将设置一个等于函数调用的值， myFunction 为 3、7。 要评估这个表达式，我们需要为 我们正在调用的函数（在本例中为 MyFunction）创建一个框架。 这将保存 myFunction 的参数和变量。 接下来，我们将参数传递给 myFunction。 我们为 每个参数创建一个方框，其名称来自函数声明 x 和 y。 我们通过复制 传递的表达式的值来初始化它们，这里，分别是 3 和 7。 接下来，我们需要记下当我们完成执行 myFunction 后要返回到哪里。 代码中的这个位置被命名为调用站点 ，即函数被调用的地方。 我们将在代码中用标记 1 记下来，然后 在框架的角落放置相同的标记。 最后，我们将执行箭头移到 MyFunction 中，然后 开始在那里执行代码。 在这里，我们声明并初始化 z，计算表达式，2 次 x-y。 x 和 y 的值分别来自 myFunction 的框架， 分别是 3 和 7，因此 z 将为负 1。 现在，我们已经达成了退货声明。r@@ eturn 语句告诉我们让当前函数 返回到框架中注明的调用站点。 它们还会告诉我们要返回给呼叫者的值。 我们需要做的第一件事是评估这个表达式 以获得返回值。 这里，表达式是 z 乘以 x，所以 我们计算负数 1 乘以 3，得到负数 3。 接下来，找到我们应该返回的地方。 这是我们在框架中记录的呼叫地点。 然后我们将返回值复制回调用站点。 函数调用计算结果为该返回值。 我们将执行箭头移回调用站点，然后销毁 我们刚才返回的函数的框架。 现在，我们又回到了主场。 对 myFunction 的调用计算结果为负 3，因此 此行的行为类似于 a 变为负 3。 我们完成了任务，在 a 的盒子里放了负数 3。 我们的下一行又有一个变量声明和一个函数调用。 我们为 b 做一个盒子，然后通过同样的过程来调用 f。 我们为 f 做一个框架，然后传递参数。 这次，有一个参数的值是乘以 a，也就是 9。 我们记下从哪里返回并开始执行 f 中的代码。 我们的下一个语句是 return 语句，但 表达式涉及函数调用。 因此，我们必须在其他任何事情之前先评估那个电话。 我们从帧和过去的参数开始。 x 获取 n 的值，即 9，y 获得 n + 1 的值，即 10。 我们记下了通话现场。 这次我们使用两个，因为我们已经在其他地方使用了一个，然后 将执行箭头移到 MyFunction 的开头，然后 开始在那里执行代码。 我们声明 Z 并将其初始化为 8。 现在，我们已经准备好从 MyFunction 返回了。 我们评估 z 乘以 x，即 72。 然后我们发现框架中记下的调用站点，并将返回值复制到那里。 最后，我们将执行移回 调用站点，销毁 MyFunction 中的帧。 现在，我们继续前进 f，使用 72 作为对 myFunction 的调用的值。 我们评估 3 + 72 得到 75。 由于我们正在评估 return 语句，因此这是 f 的返回值， 因此我们找到调用站点并将返回值复制到那里。 然后我们回到那个调用站点，销毁 f 的帧。 现在，我们可以完成 b 的初始化，b 获得 75。 最后，我们收到了 main 的返回声明。 当我们从 main 返回时，程序会退出，这样我们就完成了。