接下来你要学习的C部分是函数。 要了解它们为何如此重要， 让我们回顾一下我们的 ClosestPoint 算法。 这里有两个地方使用此算法计算两点之间的距离。 为什么这很重要？ 好吧，我们需要进行两次相同的计算。 如果没有函数，我们会写两次相同的代码，而这仅仅是这个问题。 如果我们还有其他问题需要计算两点之间的距离怎么办？ 我们有几个其他问题的例子， 需要计算两点之间的距离， 但还有很多其他问题。 我们可以每次都重写代码，对于 像计算 距离这样小的事情来说，这似乎没什么大不了的，但我们希望尽可能避免重复代码。 每次我们重写代码时， 我们都会冒着犯错误和在程序中引入错误的风险。 此外，一次又一次地重写同样的代码真的很无聊。 相反，我们应该将距离的计算抽象成一个自己的函数。将@@ 距离设为自己的函数意味着我们可以在 任何需要的地方重复使用该算法，而无需重写它。这将如何运作？ 好吧，我们的 ClosestPoint 函数将在 其代码中调用距离函数。 也就是说，它将要求距离函数执行其计算。 为此，我们的 ClosestPoint 函数将首先传入 参数值，指定距离函数应在哪些点上进行计算。 距离函数将执行其代码， 根据你正在学习的规则执行其中的任何语句。 当它得出 一个答案并返回到调用它的函数时，它就结束了。 当它返回时，距离函数就完成了 ，调用函数会继续自己执行， 使用它从调用的函数中得到的答案。 那么，这有什么帮助呢？ 首先，我们可以随时重复使用这种距离计算。 我们不必重写它。 我们可以调用距离函数来计算任意两点之间的距离。 无论我们需要计算C losestPoint函数中不同位置的距离，还是在我们要 解决的其他问题中计算距离都无关紧要，我们只需要称之为即可。 函数的另一个重要好处是抽象。 抽象是将接口（ 意思是某物所做的事情）与 其实现的分离，即它是如何实现的。 一旦我们编写了距离函数， 我们就可以在不考虑其内部工作原理的情况下使用它。 随着你构建越来越大的程序， 抽象变得越来越重要。 您也不局限于两个功能。 你可以有许多函数，它们可以根据需要调用任意数量的其他函数。 例如，假设我们的 ClosestPoint 函数是一个更大的程序的一部分， 该程序包含有关各种类型位置 的信息，并使用这些信息为我们提供特定类型的最近位置。 你最终可能会得到这样的结果。 主函数是所有 C 程序的起点，它 可能会调用一个函数来查找最近的商店点 42,17，并 传入参数来指定此信息。 然后，该函数可能会调用另一个函数来查找所有类型为 store 的位置。然后 ，getByType 函数可以返回 商店的位置列表，然后 findNearest 可以使用。 然后，findNearest 可以调用另一个函数（ 例如我们的 ClosestPoint 函数）来找到离我们想要的位置最近的点。 正如我们之前所讨论的，C losestPoint可以调用距离来计算 两点之间的距离，它将返回计算出的距离。 当然，对于ClosestPoint来说， 根据需要多次呼叫距离， 无论传入什么分数都能得到答案，这是完全可以的。 当 ClosestPoint 完成计算并找出答案时， 它会将该值返回给调用 它的函数，然后该函数完成计算并将其答案返回给调用它的函数。 好吧，太棒了。 现在，你有了函数的高级概念。 让我们在 C 语言中深入研究它们的语法和语义