1
00:00:03,319 --> 00:00:07,364
好了，既然你已经掌握了函数调用语义的基本概念，那

2
00:00:07,364 --> 00:00:09,540
就让我们来看看它们的实际应用。

3
00:00:09,540 --> 00:00:11,140
我们这里有三个函数。

4
00:00:11,140 --> 00:00:14,020
我的函数，f 和 main。

5
00:00:14,020 --> 00:00:18,360
如你所知，我们开始在 main 中执行一个程序。

6
00:00:18,360 --> 00:00:19,990
我们已经为 main 画了一个框架，

7
00:00:19,990 --> 00:00:24,850
准备开始执行它的第一个声明变量 a 的语句。

8
00:00:24,850 --> 00:00:27,450
所以我们在框架内为 main 创建了它的方框。

9
00:00:28,490 --> 00:00:32,952
接下来，我们将设置一个等于函数调用的值，

10
00:00:32,952 --> 00:00:34,527
myFunction 为 3、7。

11
00:00:34,527 --> 00:00:38,262
要评估这个表达式，我们需要为

12
00:00:38,262 --> 00:00:42,340
我们正在调用的函数（在本例中为 MyFunction）创建一个框架。

13
00:00:42,340 --> 00:00:45,404
这将保存 myFunction 的参数和变量。

14
00:00:46,710 --> 00:00:50,100
接下来，我们将参数传递给 myFunction。

15
00:00:50,100 --> 00:00:51,250
我们为

16
00:00:51,250 --> 00:00:57,190
每个参数创建一个方框，其名称来自函数声明 x 和 y。

17
00:00:57,190 --> 00:01:02,000
我们通过复制

18
00:01:02,000 --> 00:01:04,760
传递的表达式的值来初始化它们，这里，分别是 3 和 7。

19
00:01:04,760 --> 00:01:09,620
接下来，我们需要记下当我们完成执行 myFunction 后要返回到哪里。

20
00:01:09,620 --> 00:01:12,780
代码中的这个位置被命名为调用站点

21
00:01:12,780 --> 00:01:15,090
，即函数被调用的地方。

22
00:01:15,090 --> 00:01:19,000
我们将在代码中用标记 1 记下来，然后

23
00:01:19,000 --> 00:01:21,190
在框架的角落放置相同的标记。

24
00:01:22,210 --> 00:01:25,730
最后，我们将执行箭头移到 MyFunction 中，然后

25
00:01:25,730 --> 00:01:27,370
开始在那里执行代码。

26
00:01:28,450 --> 00:01:35,280
在这里，我们声明并初始化 z，计算表达式，2 次 x-y。

27
00:01:35,280 --> 00:01:40,090
x 和 y 的值分别来自 myFunction 的框架，

28
00:01:40,090 --> 00:01:44,050
分别是 3 和 7，因此 z 将为负 1。

29
00:01:44,050 --> 00:01:46,500
现在，我们已经达成了退货声明。r@@

30
00:01:46,500 --> 00:01:49,660
eturn 语句告诉我们让当前函数

31
00:01:49,660 --> 00:01:52,420
返回到框架中注明的调用站点。

32
00:01:52,420 --> 00:01:55,920
它们还会告诉我们要返回给呼叫者的值。

33
00:01:55,920 --> 00:01:59,150
我们需要做的第一件事是评估这个表达式

34
00:01:59,150 --> 00:01:59,910
以获得返回值。

35
00:02:00,930 --> 00:02:04,151
这里，表达式是 z 乘以 x，所以

36
00:02:04,151 --> 00:02:08,694
我们计算负数 1 乘以 3，得到负数 3。

37
00:02:08,694 --> 00:02:11,159
接下来，找到我们应该返回的地方。

38
00:02:11,159 --> 00:02:14,170
这是我们在框架中记录的呼叫地点。

39
00:02:14,170 --> 00:02:17,810
然后我们将返回值复制回调用站点。

40
00:02:17,810 --> 00:02:20,250
函数调用计算结果为该返回值。

41
00:02:21,650 --> 00:02:25,730
我们将执行箭头移回调用站点，然后销毁

42
00:02:25,730 --> 00:02:27,240
我们刚才返回的函数的框架。

43
00:02:28,330 --> 00:02:30,200
现在，我们又回到了主场。

44
00:02:30,200 --> 00:02:33,780
对 myFunction 的调用计算结果为负 3，因此

45
00:02:33,780 --> 00:02:36,420
此行的行为类似于 a 变为负 3。

46
00:02:36,420 --> 00:02:41,897
我们完成了任务，在 a 的盒子里放了负数 3。

47
00:02:41,897 --> 00:02:45,930
我们的下一行又有一个变量声明和一个函数调用。

48
00:02:45,930 --> 00:02:50,400
我们为 b 做一个盒子，然后通过同样的过程来调用 f。

49
00:02:50,400 --> 00:02:54,170
我们为 f 做一个框架，然后传递参数。

50
00:02:54,170 --> 00:02:59,780
这次，有一个参数的值是乘以 a，也就是 9。

51
00:02:59,780 --> 00:03:05,610
我们记下从哪里返回并开始执行 f 中的代码。

52
00:03:05,610 --> 00:03:08,390
我们的下一个语句是 return 语句，但

53
00:03:08,390 --> 00:03:10,960
表达式涉及函数调用。

54
00:03:10,960 --> 00:03:15,270
因此，我们必须在其他任何事情之前先评估那个电话。

55
00:03:15,270 --> 00:03:19,000
我们从帧和过去的参数开始。

56
00:03:19,000 --> 00:03:25,180
x 获取 n 的值，即 9，y 获得 n + 1 的值，即 10。

57
00:03:25,180 --> 00:03:26,780
我们记下了通话现场。

58
00:03:26,780 --> 00:03:30,980
这次我们使用两个，因为我们已经在其他地方使用了一个，然后

59
00:03:30,980 --> 00:03:34,180
将执行箭头移到 MyFunction 的开头，然后

60
00:03:34,180 --> 00:03:35,710
开始在那里执行代码。

61
00:03:37,070 --> 00:03:40,210
我们声明 Z 并将其初始化为 8。

62
00:03:40,210 --> 00:03:43,150
现在，我们已经准备好从 MyFunction 返回了。

63
00:03:43,150 --> 00:03:46,867
我们评估 z 乘以 x，即 72。

64
00:03:46,867 --> 00:03:51,840
然后我们发现框架中记下的调用站点，并将返回值复制到那里。

65
00:03:52,900 --> 00:03:55,640
最后，我们将执行移回

66
00:03:55,640 --> 00:03:59,600
调用站点，销毁 MyFunction 中的帧。

67
00:03:59,600 --> 00:04:03,230
现在，我们继续前进 f，使用 72 作为对

68
00:04:03,230 --> 00:04:05,338
myFunction 的调用的值。

69
00:04:05,338 --> 00:04:09,607
我们评估 3 + 72 得到 75。

70
00:04:09,607 --> 00:04:14,515
由于我们正在评估 return 语句，因此这是 f 的返回值，

71
00:04:14,515 --> 00:04:18,970
因此我们找到调用站点并将返回值复制到那里。

72
00:04:18,970 --> 00:04:22,861
然后我们回到那个调用站点，销毁 f 的帧。

73
00:04:22,861 --> 00:04:28,340
现在，我们可以完成 b 的初始化，b 获得 75。

74
00:04:28,340 --> 00:04:32,360
最后，我们收到了 main 的返回声明。

75
00:04:32,360 --> 00:04:35,970
当我们从 main 返回时，程序会退出，这样我们就完成了。