在本视频中，我们将执行等效的 For 循环和 While 循环代码。 for 循环有时被称为语法糖， 因为它允许你编写更紧凑的计数代码，这是 一种常见的编程习语。 让我们来看看它们相似的解剖结构， 两者都有初始化语句。 在 for 循环中，它紧随其后的是 for 关键字，然后 是等效的 while 循环，就在 while 循环开始之前。 条件表达式是第二部分，紧 随于 for 关键字和 while 关键字之后的括号内的部分。 increment 语句是 for 关键字之后的第三部分，但是等效的 while 循环将在循环主体内的右大括号之前递增。 最后，在 for 循环主体中发生的任何语句 也可能发生在 increment 语句之前的 while 循环中。 让我们来看看这两个等效循环的实际运行情况。 与往常一样，我们从 main 中的执行箭头开始。 我们将 y 初始化为一，n 初始化为三。 现在，for 循环的语法在 for 关键字之后有 int i = 1 的初始化， 所以当 右边的 while 执行箭头进入大括号并初始化 i 时，我们将暂停那里的执行箭头，以同样 的方式改变程序的状态。 花括号的用途很微妙。 由于变量 i 的作用域仅限于 for 循环，因此 花括号将变量 i 的范围限制在该框内。 否则，它的作用域将是整个主函数 ，而不等同于 for 循环版本。查看@@ 条件表达式， 我们看到 1 < 3 是真的， 所以我们进入循环并开始在那里执行语句。 Y 乘以 i 是 1 乘以 1 也就是 1。 接下来，我们将 i 递增到 2，然后返回到循环的顶部。 检查条件表达式 2 < 3 是否正确， 因此我们进入循环并计算 y 乘以 i，即 1 乘以 2，将 2 赋给 y。 我们将 i 增量 为 3 然后返回循环的顶部，3 < 3 为假， 因此我们将执行箭头移到循环之后。 尊重 for 循环中 i 的作用域， 我们还在 while 循环之后退出大括号， 销毁 i 的盒子，因为它现在超出了作用域。 最后，我们返回零并退出 main。