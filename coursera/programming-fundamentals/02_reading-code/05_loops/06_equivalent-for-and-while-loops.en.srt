1
00:00:02,440 --> 00:00:07,850
In this video, we're going to execute equivalent For loop and While loop code.

2
00:00:07,850 --> 00:00:10,715
A for loop is sometimes called syntactic sugar

3
00:00:10,715 --> 00:00:13,925
because it allows you to write a more compact code for counting,

4
00:00:13,925 --> 00:00:16,010
a common programming idiom.

5
00:00:16,010 --> 00:00:18,162
Let's look at their similar anatomy,

6
00:00:18,162 --> 00:00:20,330
both have an initialization statement.

7
00:00:20,330 --> 00:00:24,515
In the for loop, it follows the for keyword and then the equivalent while loop,

8
00:00:24,515 --> 00:00:27,095
it is just before the beginning of the while loop.

9
00:00:27,095 --> 00:00:29,891
The conditional expression is the second piece,

10
00:00:29,891 --> 00:00:35,715
following the for keyword and the piece inside parentheses after the while keyword.

11
00:00:35,715 --> 00:00:38,650
The increment statement is the third piece

12
00:00:38,650 --> 00:00:41,410
following the for keyword but an equivalent while

13
00:00:41,410 --> 00:00:47,275
loop would increment inside the loop body just before the close curly brackets.

14
00:00:47,275 --> 00:00:50,430
Finally, any statements that happen in the body of the for loop

15
00:00:50,430 --> 00:00:54,280
could also happen in a while loop before the increment statement.

16
00:00:54,280 --> 00:00:57,605
Let's see these two equivalent loops in action.

17
00:00:57,605 --> 00:01:01,920
As always, we begin with our execution arrow inside main.

18
00:01:01,920 --> 00:01:04,800
We initialize y to one and n to three.

19
00:01:04,800 --> 00:01:06,790
Now, the syntax of the for loop has the int

20
00:01:06,790 --> 00:01:10,015
i = 1 initialization just after the for keyword,

21
00:01:10,015 --> 00:01:12,930
so we'll pause the execution arrow there as the while

22
00:01:12,930 --> 00:01:17,115
execution arrow on the right enters the open curly brace and initializes i,

23
00:01:17,115 --> 00:01:19,690
changing the state of our program in the same way.

24
00:01:19,690 --> 00:01:21,855
The purpose of the curly braces is subtle.

25
00:01:21,855 --> 00:01:25,080
Since scope of variable i is limited to the for loop,

26
00:01:25,080 --> 00:01:28,620
the curly braces restrict the scope of variable i to this box.

27
00:01:28,620 --> 00:01:31,290
Otherwise, its scope would be the whole main function

28
00:01:31,290 --> 00:01:34,555
and it would not be equivalent to the for loop version.

29
00:01:34,555 --> 00:01:36,405
Looking at the conditional expression,

30
00:01:36,405 --> 00:01:38,485
we see 1 < 3 is true,

31
00:01:38,485 --> 00:01:42,107
so we enter the loop and begin executing statements there.

32
00:01:42,107 --> 00:01:45,235
Y times i is 1 times 1 which is 1.

33
00:01:45,235 --> 00:01:48,765
Next, we'll increment i to 2 and return to the top of the loop.

34
00:01:48,765 --> 00:01:51,999
Checking the conditional expression 2 < 3 is true,

35
00:01:51,999 --> 00:01:57,540
so we enter the loop and evaluate y times i which is 1 times 2, assigning 2 to y.

36
00:01:57,540 --> 00:02:01,055
We'll increment i to 3 and return to the top of the loop,

37
00:02:01,055 --> 00:02:02,614
3 < 3 is false,

38
00:02:02,614 --> 00:02:05,355
so we move the execution arrow to just after the loop.

39
00:02:05,355 --> 00:02:07,500
Respecting the scope of i in the for loop,

40
00:02:07,500 --> 00:02:10,236
we also exit the curly brace after the while loop,

41
00:02:10,236 --> 00:02:13,860
destroying the box for i since it is now out of scope.

42
00:02:13,860 --> 00:02:17,000
Finally, we return zero and exit main.