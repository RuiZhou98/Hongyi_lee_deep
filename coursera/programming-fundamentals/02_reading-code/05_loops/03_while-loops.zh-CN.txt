在这段视频中， 我们将演示包含 whie 循环的代码的执行过程。 与往常一样，我们从 main 开头的执行箭头开始。 第一条语句声明变量 x，并 通过调用 2 和 9 中的 g 对其进行初始化。 在 g 中，我们声明变量 total 并将其初始化为 0，然后我们到达 while 循环。 这个 while 循环的条件表达式是 a 小于 b，在本例中为 2 小于 9， 这是真的，所以我们输入 while 循环的主体。 下一个语句是合计加等于 a。 请记住，这是合计等于总和加 a 的简写，所以 总和将等于 0 加 2，即 2。 我们将 2 分配给总数，现在我们有一个 printf 语句。 A = %d，b = %d 新行， 其中第一个 %d 将 a 的值转换为十进制数， 第二个 %d 将 b 的值转换为十进制数。 这会打印出 a = 2，b = 9。 下一个语句是 ++。 回想一下，这是 a = a + 1 的简写，所以我们要做 a = 3。 B--是 b = b-1 的简写， 所以我们要做 b = 8。 现在我们已经到达了 while 循环的 右大括号，所以我们的执行箭头会直接跳回到 while 循环的顶部，就在 条件表达式之前，以确定我们是否应该进入循环的主体。 计算条件表达式得出 3 小于 8，这是真的， 所以我们再次输入 while 循环的主体。 我们总计 +=a，2+3 等于 5， 所以我们更新总数。 然后，我们要打印 a=3，b=8。 我们要将 a 递增 1，将 b 递减 1。 我们再次到达了 while 循环底部的紧密卷曲支撑，所以 我们跳回了顶部。 4 小于 7 是真的，所以我们进入了 while 循环的主体。 总计 += a，printf a=4，b=7，增量 a 和 减量，跳回循环的顶部。 5 小于 6 是真的，所以我们进入了 while 循环的主体。 我们像以前一样执行循环中的每条语句。 但是，现在，当我们回到循环的顶部并 评估我们的条件表达式时，我们发现少了 6，即 5 是假的。 我们的执行箭头跳过循环主体， 紧接着开始执行语句。 要返回的 total 值为 14，因此我们将其返回到 main 离开函数 g，然后将执行箭头返回到 main，在 那里我们现在可以在 x = 14 的情况下完成 x 的初始化。 然后，我们继续在 main 中执行语句。 我们打印出 x = 14 然后返回 0 退出 main 并离开程序。