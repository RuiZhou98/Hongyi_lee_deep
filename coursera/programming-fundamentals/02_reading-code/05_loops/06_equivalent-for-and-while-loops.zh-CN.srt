1
00:00:02,440 --> 00:00:07,850
在本视频中，我们将执行等效的 For 循环和 While 循环代码。

2
00:00:07,850 --> 00:00:10,715
for 循环有时被称为语法糖，

3
00:00:10,715 --> 00:00:13,925
因为它允许你编写更紧凑的计数代码，这是

4
00:00:13,925 --> 00:00:16,010
一种常见的编程习语。

5
00:00:16,010 --> 00:00:18,162
让我们来看看它们相似的解剖结构，

6
00:00:18,162 --> 00:00:20,330
两者都有初始化语句。

7
00:00:20,330 --> 00:00:24,515
在 for 循环中，它紧随其后的是 for 关键字，然后

8
00:00:24,515 --> 00:00:27,095
是等效的 while 循环，就在 while 循环开始之前。

9
00:00:27,095 --> 00:00:29,891
条件表达式是第二部分，紧

10
00:00:29,891 --> 00:00:35,715
随于 for 关键字和 while 关键字之后的括号内的部分。

11
00:00:35,715 --> 00:00:38,650
increment 语句是 for

12
00:00:38,650 --> 00:00:41,410
关键字之后的第三部分，但是等效的 while

13
00:00:41,410 --> 00:00:47,275
循环将在循环主体内的右大括号之前递增。

14
00:00:47,275 --> 00:00:50,430
最后，在 for 循环主体中发生的任何语句

15
00:00:50,430 --> 00:00:54,280
也可能发生在 increment 语句之前的 while 循环中。

16
00:00:54,280 --> 00:00:57,605
让我们来看看这两个等效循环的实际运行情况。

17
00:00:57,605 --> 00:01:01,920
与往常一样，我们从 main 中的执行箭头开始。

18
00:01:01,920 --> 00:01:04,800
我们将 y 初始化为一，n 初始化为三。

19
00:01:04,800 --> 00:01:06,790
现在，for 循环的语法在 for

20
00:01:06,790 --> 00:01:10,015
关键字之后有 int i = 1 的初始化，

21
00:01:10,015 --> 00:01:12,930
所以当

22
00:01:12,930 --> 00:01:17,115
右边的 while 执行箭头进入大括号并初始化 i 时，我们将暂停那里的执行箭头，以同样

23
00:01:17,115 --> 00:01:19,690
的方式改变程序的状态。

24
00:01:19,690 --> 00:01:21,855
花括号的用途很微妙。

25
00:01:21,855 --> 00:01:25,080
由于变量 i 的作用域仅限于 for 循环，因此

26
00:01:25,080 --> 00:01:28,620
花括号将变量 i 的范围限制在该框内。

27
00:01:28,620 --> 00:01:31,290
否则，它的作用域将是整个主函数

28
00:01:31,290 --> 00:01:34,555
，而不等同于 for 循环版本。查看@@

29
00:01:34,555 --> 00:01:36,405
条件表达式，

30
00:01:36,405 --> 00:01:38,485
我们看到 1 < 3 是真的，

31
00:01:38,485 --> 00:01:42,107
所以我们进入循环并开始在那里执行语句。

32
00:01:42,107 --> 00:01:45,235
Y 乘以 i 是 1 乘以 1 也就是 1。

33
00:01:45,235 --> 00:01:48,765
接下来，我们将 i 递增到 2，然后返回到循环的顶部。

34
00:01:48,765 --> 00:01:51,999
检查条件表达式 2 < 3 是否正确，

35
00:01:51,999 --> 00:01:57,540
因此我们进入循环并计算 y 乘以 i，即 1 乘以 2，将 2 赋给 y。

36
00:01:57,540 --> 00:02:01,055
我们将 i 增量

37
00:02:01,055 --> 00:02:02,614
为 3 然后返回循环的顶部，3 < 3 为假，

38
00:02:02,614 --> 00:02:05,355
因此我们将执行箭头移到循环之后。

39
00:02:05,355 --> 00:02:07,500
尊重 for 循环中 i 的作用域，

40
00:02:07,500 --> 00:02:10,236
我们还在 while 循环之后退出大括号，

41
00:02:10,236 --> 00:02:13,860
销毁 i 的盒子，因为它现在超出了作用域。

42
00:02:13,860 --> 00:02:17,000
最后，我们返回零并退出 main。