1
00:00:03,910 --> 00:00:04,599
在这段视频中，

2
00:00:04,599 --> 00:00:08,640
我们将演示包含 whie 循环的代码的执行过程。

3
00:00:08,640 --> 00:00:12,240
与往常一样，我们从 main 开头的执行箭头开始。

4
00:00:12,240 --> 00:00:15,401
第一条语句声明变量 x，并

5
00:00:15,401 --> 00:00:18,250
通过调用 2 和 9 中的 g 对其进行初始化。

6
00:00:18,250 --> 00:00:22,340
在 g 中，我们声明变量 total

7
00:00:22,340 --> 00:00:26,980
并将其初始化为 0，然后我们到达 while 循环。

8
00:00:26,980 --> 00:00:31,131
这个 while 循环的条件表达式是

9
00:00:31,131 --> 00:00:35,279
a 小于 b，在本例中为 2 小于 9，

10
00:00:35,279 --> 00:00:39,850
这是真的，所以我们输入 while 循环的主体。

11
00:00:39,850 --> 00:00:44,040
下一个语句是合计加等于 a。

12
00:00:44,040 --> 00:00:48,580
请记住，这是合计等于总和加 a 的简写，所以

13
00:00:48,580 --> 00:00:52,290
总和将等于 0 加 2，即 2。

14
00:00:52,290 --> 00:00:56,883
我们将 2 分配给总数，现在我们有一个 printf 语句。

15
00:00:56,883 --> 00:00:59,011
A = %d，b = %d 新行，

16
00:00:59,011 --> 00:01:04,011
其中第一个 %d 将 a 的值转换为十进制数，

17
00:01:04,011 --> 00:01:09,200
第二个 %d 将 b 的值转换为十进制数。

18
00:01:09,200 --> 00:01:12,675
这会打印出 a = 2，b = 9。

19
00:01:12,675 --> 00:01:16,370
下一个语句是 ++。

20
00:01:16,370 --> 00:01:22,351
回想一下，这是 a = a + 1 的简写，所以我们要做 a = 3。

21
00:01:22,351 --> 00:01:27,060
B--是 b = b-1 的简写，

22
00:01:27,060 --> 00:01:30,100
所以我们要做 b = 8。

23
00:01:30,100 --> 00:01:34,290
现在我们已经到达了 while 循环的

24
00:01:34,290 --> 00:01:39,330
右大括号，所以我们的执行箭头会直接跳回到 while 循环的顶部，就在

25
00:01:39,330 --> 00:01:43,760
条件表达式之前，以确定我们是否应该进入循环的主体。

26
00:01:43,760 --> 00:01:49,300
计算条件表达式得出 3 小于 8，这是真的，

27
00:01:49,300 --> 00:01:51,420
所以我们再次输入 while 循环的主体。

28
00:01:52,500 --> 00:01:57,400
我们总计 +=a，2+3 等于 5，

29
00:01:57,400 --> 00:02:00,380
所以我们更新总数。

30
00:02:00,380 --> 00:02:05,132
然后，我们要打印 a=3，b=8。

31
00:02:05,132 --> 00:02:09,721
我们要将 a 递增 1，将 b 递减 1。

32
00:02:09,721 --> 00:02:14,323
我们再次到达了 while 循环底部的紧密卷曲支撑，所以

33
00:02:14,323 --> 00:02:16,050
我们跳回了顶部。

34
00:02:16,050 --> 00:02:19,864
4 小于 7 是真的，所以我们进入了 while 循环的主体。

35
00:02:19,864 --> 00:02:26,034
总计 += a，printf a=4，b=7，增量 a 和

36
00:02:26,034 --> 00:02:31,268
减量，跳回循环的顶部。

37
00:02:31,268 --> 00:02:35,540
5 小于 6 是真的，所以我们进入了 while 循环的主体。

38
00:02:35,540 --> 00:02:38,280
我们像以前一样执行循环中的每条语句。

39
00:02:40,010 --> 00:02:44,741
但是，现在，当我们回到循环的顶部并

40
00:02:44,741 --> 00:02:51,368
评估我们的条件表达式时，我们发现少了 6，即 5 是假的。

41
00:02:51,368 --> 00:02:54,770
我们的执行箭头跳过循环主体，

42
00:02:54,770 --> 00:02:58,310
紧接着开始执行语句。

43
00:02:58,310 --> 00:03:02,910
要返回的 total 值为 14，因此我们将其返回到 main

44
00:03:02,910 --> 00:03:08,056
离开函数 g，然后将执行箭头返回到 main，在

45
00:03:08,056 --> 00:03:12,954
那里我们现在可以在 x = 14 的情况下完成 x 的初始化。

46
00:03:12,954 --> 00:03:16,195
然后，我们继续在 main 中执行语句。

47
00:03:16,195 --> 00:03:21,730
我们打印出 x = 14 然后返回 0 退出 main 并离开程序。