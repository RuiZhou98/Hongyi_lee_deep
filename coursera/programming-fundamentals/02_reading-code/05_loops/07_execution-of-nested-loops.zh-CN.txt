在这段视频中，我们有一个嵌套的例子。 在函数 f 中，我们有一个 while 循环，里面有一个 if 语句。在 if 语句里面有一个 for 循环。 在嵌套时要记住的重要一点是， 它真的没有什么特别之处。 我们遵循我们一直看到的相同规则。 我们在 main 的开头处使用执行箭头。 我们要做的第一件事就是调用 f，传递 3 表示 a，传递 8 表示 b。 我们一如既往地创建一个框架。 我们要记住要返回的位置，然后 开始在 f 中执行代码。由 于 a 小于 b 是真的，所以我们要进入 while 循环的主体。 我们打印 a 等于 3，b 等于 8。 然后我们得到一个 if 语句，用于检查 mod 2 是否为 0。 请记住，百分比是模组运算符 ，当你进行除法时，它会计算余数。 3 除以 2 的余数为 1，因此 3 模组 2 等于 1。 a mod 2 不为零，所以这个条件表达式为假， 我们跳过 if 语句。 >> a++ 将 a 递增到 4，而 b--将 b 递减到 7。 现在我们已经到了 while 循环的尽头。 因此，我们回到起点，然后再次测试它的状况。 a 小于 b 是真的，所以我们输入正文并打印 a=4，b=7。 现在，当我们看模组 2 时，4 模组 2 是 0。 0 = 0 为真，因此我们输入 if 语句。 现在我们有一个 for 循环。 它会声明一个 int i，然后将其初始化为 a 的值。 所以我们为 i 做一个方框，然后将其设置为 4。 然后我们测试 for 循环的状态。 4 小于 7 是真的，所以我们输入 for 循环的主体。 我们打印 i = 4。 然后我们执行增量语句，将 5 赋给 i， 然后返回循环的开端。 我们再次检查状况。 5 小于 7 是真的，所以我们再次进入 for 循环，我们打印 i = 5。 然后我们将 i 递增到 6，然后返回到循环的开头。 我们重复这个过程。 6 小于 7，打印 i = 6。将 i 增量为 7，然后返回到起点。 这次，7 小于 7 是错误的。 因此，我们跳过了四个循环，留下了 i 的作用域。 然后继续执行。 我们现在处于 if 语句正文的末尾， 因此我们将在它之后立即恢复执行。 我们将 a 递增到 5，将 b 减为 6，现在我们已经走到了 y 循环的尽头。 于是我们跳回了山顶。 小于 b 的 A 仍然是正确的。 所以我们进入正文，我们打印 a=5，b=6。 我们检查一个模组 2. 5 mod 2 是 1，1=0 是假的，所以我们跳过 if 语句。 我们将 a 递增到 6，将 b 减为 5。 然后返回到 while 循环的顶部。 6 小于 5 是错误的。 因此，我们跳过 while 循环的主体，到达函数的末尾。 这会导致我们返回主页面。 main 中唯一剩下的就是 return 语句，所以 我们返回 0 然后退出程序。