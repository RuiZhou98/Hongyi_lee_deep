1
00:00:03,131 --> 00:00:07,010
在这段视频中，我们有一个嵌套的例子。

2
00:00:07,010 --> 00:00:12,472
在函数 f 中，我们有一个 while 循环，里面有一个 if 语句。在

3
00:00:12,472 --> 00:00:15,990
if 语句里面有一个 for 循环。

4
00:00:15,990 --> 00:00:18,580
在嵌套时要记住的重要一点是，

5
00:00:18,580 --> 00:00:20,510
它真的没有什么特别之处。

6
00:00:20,510 --> 00:00:23,670
我们遵循我们一直看到的相同规则。

7
00:00:23,670 --> 00:00:27,063
我们在 main 的开头处使用执行箭头。

8
00:00:27,063 --> 00:00:34,150
我们要做的第一件事就是调用 f，传递 3 表示 a，传递 8 表示 b。

9
00:00:34,150 --> 00:00:36,680
我们一如既往地创建一个框架。

10
00:00:36,680 --> 00:00:39,190
我们要记住要返回的位置，然后

11
00:00:39,190 --> 00:00:40,960
开始在 f 中执行代码。由

12
00:00:42,110 --> 00:00:47,910
于 a 小于 b 是真的，所以我们要进入 while 循环的主体。

13
00:00:47,910 --> 00:00:50,377
我们打印 a 等于 3，b 等于 8。

14
00:00:50,377 --> 00:00:55,050
然后我们得到一个 if 语句，用于检查 mod 2 是否为 0。

15
00:00:55,050 --> 00:00:58,013
请记住，百分比是模组运算符

16
00:00:58,013 --> 00:01:01,542
，当你进行除法时，它会计算余数。

17
00:01:01,542 --> 00:01:06,860
3 除以 2 的余数为 1，因此 3 模组 2 等于 1。

18
00:01:06,860 --> 00:01:12,040
a mod 2 不为零，所以这个条件表达式为假，

19
00:01:12,040 --> 00:01:16,219
我们跳过 if 语句。

20
00:01:16,219 --> 00:01:20,679
>> a++ 将 a 递增到 4，而 b--将 b 递减到 7。

21
00:01:20,679 --> 00:01:24,250
现在我们已经到了 while 循环的尽头。

22
00:01:24,250 --> 00:01:28,520
因此，我们回到起点，然后再次测试它的状况。

23
00:01:28,520 --> 00:01:35,460
a 小于 b 是真的，所以我们输入正文并打印 a=4，b=7。

24
00:01:35,460 --> 00:01:39,929
现在，当我们看模组 2 时，4 模组 2 是 0。

25
00:01:39,929 --> 00:01:44,610
0 = 0 为真，因此我们输入 if 语句。

26
00:01:45,620 --> 00:01:47,497
现在我们有一个 for 循环。

27
00:01:47,497 --> 00:01:52,520
它会声明一个 int i，然后将其初始化为 a 的值。

28
00:01:52,520 --> 00:01:55,990
所以我们为 i 做一个方框，然后将其设置为 4。

29
00:01:55,990 --> 00:01:58,460
然后我们测试 for 循环的状态。

30
00:01:58,460 --> 00:02:03,720
4 小于 7 是真的，所以我们输入 for 循环的主体。

31
00:02:03,720 --> 00:02:05,969
我们打印 i = 4。

32
00:02:05,969 --> 00:02:09,608
然后我们执行增量语句，将 5 赋给 i，

33
00:02:09,608 --> 00:02:12,770
然后返回循环的开端。

34
00:02:12,770 --> 00:02:14,353
我们再次检查状况。

35
00:02:14,353 --> 00:02:21,487
5 小于 7 是真的，所以我们再次进入 for 循环，我们打印 i = 5。

36
00:02:21,487 --> 00:02:26,180
然后我们将 i 递增到 6，然后返回到循环的开头。

37
00:02:26,180 --> 00:02:28,160
我们重复这个过程。

38
00:02:28,160 --> 00:02:32,367
6 小于 7，打印 i = 6。将

39
00:02:32,367 --> 00:02:34,750
i 增量为 7，然后返回到起点。

40
00:02:35,820 --> 00:02:38,780
这次，7 小于 7 是错误的。

41
00:02:38,780 --> 00:02:41,654
因此，我们跳过了四个循环，留下了 i 的作用域。

42
00:02:41,654 --> 00:02:43,334
然后继续执行。

43
00:02:43,334 --> 00:02:46,378
我们现在处于 if 语句正文的末尾，

44
00:02:46,378 --> 00:02:49,400
因此我们将在它之后立即恢复执行。

45
00:02:49,400 --> 00:02:54,922
我们将 a 递增到 5，将 b 减为 6，现在我们已经走到了 y 循环的尽头。

46
00:02:54,922 --> 00:02:57,680
于是我们跳回了山顶。

47
00:02:57,680 --> 00:02:59,780
小于 b 的 A 仍然是正确的。

48
00:02:59,780 --> 00:03:04,660
所以我们进入正文，我们打印 a=5，b=6。

49
00:03:04,660 --> 00:03:05,790
我们检查一个模组 2.

50
00:03:05,790 --> 00:03:12,185
5 mod 2 是 1，1=0 是假的，所以我们跳过 if 语句。

51
00:03:12,185 --> 00:03:16,591
我们将 a 递增到 6，将 b 减为 5。

52
00:03:16,591 --> 00:03:19,415
然后返回到 while 循环的顶部。

53
00:03:19,415 --> 00:03:21,770
6 小于 5 是错误的。

54
00:03:21,770 --> 00:03:25,260
因此，我们跳过 while 循环的主体，到达函数的末尾。

55
00:03:26,270 --> 00:03:28,910
这会导致我们返回主页面。

56
00:03:28,910 --> 00:03:32,270
main 中唯一剩下的就是 return 语句，所以

57
00:03:32,270 --> 00:03:34,470
我们返回 0 然后退出程序。