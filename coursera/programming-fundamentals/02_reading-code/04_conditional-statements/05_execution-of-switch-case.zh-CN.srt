1
00:00:03,436 --> 00:00:07,689
在本视频中，我们将使用函数 g 执行代码，该函数包含 switch c

2
00:00:07,689 --> 00:00:09,180
ase 语句。

3
00:00:09,180 --> 00:00:12,802
与往常一样，我们从 main 开头的执行箭头开始，

4
00:00:12,802 --> 00:00:15,960
表示语句 a = g (10, 4);。

5
00:00:15,960 --> 00:00:20,242
既然我们声明了 a，我们就为它做一个方框，然后我们为

6
00:00:20,242 --> 00:00:24,535
函数 g 创建一个框架，然后在里面填充值 10 代表 n，用 4 表示 x。

7
00:00:24,535 --> 00:00:28,870
我们记下自己的位置，然后返回到函数完成的时间，

8
00:00:28,870 --> 00:00:30,113
然后输入函数 g。

9
00:00:30,113 --> 00:00:35,310
在本例中，我们有 switch 语句 x + n 是 4 + 10，也就是 14。

10
00:00:35,310 --> 00:00:38,520
因此，我们找到了匹配的 case 标签 case 14，然后将

11
00:00:38,520 --> 00:00:43,360
执行箭头转移到该案例中，然后开始在那里执行语句。

12
00:00:43,360 --> 00:00:49,490
我们遇到的第一条语句是返回语句 n-x，10-4 = 6。

13
00:00:49,490 --> 00:00:52,120
与往常一样，当我们遇到 return 语句时，

14
00:00:52,120 --> 00:00:56,100
我们将记下要返回的值，然后离开我们

15
00:00:56,100 --> 00:00:58,860
要返回的函数返回到调用函数并销毁框架。

16
00:00:59,900 --> 00:01:03,243
我们以 a = 6 结束了赋值语句。

17
00:01:03,243 --> 00:01:06,258
现在我们到达 int b = g (a, 2)。

18
00:01:06,258 --> 00:01:10,671
因此，我们为 b 创建一个方框，为 g 画一个框架，传入参数 a，

19
00:01:10,671 --> 00:01:11,860
即 6 和 2。

20
00:01:11,860 --> 00:01:14,630
我们记下我们的位置并输入函数 g。

21
00:01:15,750 --> 00:01:19,260
在这里，我们的选择表达式是 2 + 6，也就是 8，所以

22
00:01:19,260 --> 00:01:23,740
我们将深入研究 8 的案例并开始在那里执行语句。

23
00:01:23,740 --> 00:01:27,330
我们遇到的第一条语句是 x = x + 1，因此

24
00:01:27,330 --> 00:01:30,490
我们将 x 的框更新为 3 而不是 2。

25
00:01:30,490 --> 00:01:32,920
现在我们来看下一个案例。

26
00:01:32,920 --> 00:01:34,652
这里没有中断声明，

27
00:01:34,652 --> 00:01:37,585
我们也不用担心还有另一个手机壳标签。

28
00:01:37,585 --> 00:01:41,340
我们只是继续执行语句，直到休息一下。

29
00:01:41,340 --> 00:01:44,030
下一个语句是 n = n-1。

30
00:01:44,030 --> 00:01:46,916
因此，我们要将 n 的值更新为 5。

31
00:01:46,916 --> 00:01:49,430
现在我们确实达成了休息声明。

32
00:01:49,430 --> 00:01:52,450
这个 break 语句将使我们脱离最内层

33
00:01:52,450 --> 00:01:56,220
封闭的 switch 语句，即这里的边界。

34
00:01:56,220 --> 00:01:59,719
正如我们稍后将看到的，break 可能会使我们退出其他结构。

35
00:01:59,719 --> 00:02:04,681
但是在这种情况下，它将使我们退出包含它的 switch 语句，然后

36
00:02:04,681 --> 00:02:07,860
我们在切换之后开始执行代码。

37
00:02:07,860 --> 00:02:14,542
我们遇到的下一个语句是返回 x * n，即 3 * 5，也就是 15。

38
00:02:14,542 --> 00:02:17,632
所以我们返回 15，返回 main，然后

39
00:02:17,632 --> 00:02:21,850
销毁 g 的帧然后将 15 分配给 b。

40
00:02:21,850 --> 00:02:24,870
现在我们有 int c = g (9, b)。

41
00:02:24,870 --> 00:02:28,489
因此，我们为 c 创建一个方框，为 g 创建一个框架，参数为 9，

42
00:02:28,489 --> 00:02:32,123
b 为 15，然后记下我们在哪里，然后输入函数 g。

43
00:02:32,123 --> 00:02:34,747
计算这个表达式会得到 24。

44
00:02:34,747 --> 00:02:37,617
查看我们的箱子标签，我们有 8、0 和 14。

45
00:02:37,617 --> 00:02:42,342
这些都不匹配 24，因此我们使用默认值，它匹配任何未

46
00:02:42,342 --> 00:02:45,230
被其他案例标签明确命名的内容。

47
00:02:45,230 --> 00:02:49,080
我们将跳入默认情况并开始在那里执行语句。

48
00:02:49,080 --> 00:02:52,980
我们做 x = n，将 9 分配给 x，这使我们陷入了中断，

49
00:02:52,980 --> 00:02:55,860
这使我们脱离了 switch 语句的内部。

50
00:02:55,860 --> 00:02:59,160
我们现在返回 x * n，即 81。

51
00:02:59,160 --> 00:03:04,410
回到 main，我们完成任务并从 main 退出程序时返回零。